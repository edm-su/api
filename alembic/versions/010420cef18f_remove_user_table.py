"""remove user table

Revision ID: 010420cef18f
Revises: 8545e0ad6bd4
Create Date: 2023-08-25 21:25:43.362544

"""
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "010420cef18f"
down_revision = "8545e0ad6bd4"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("comments_user_id_fkey", "comments", type_="foreignkey")
    op.execute('CREATE EXTENSION "uuid-ossp"')
    op.alter_column(
        "comments",
        "user_id",
        type_=sa.Uuid(),
        postgresql_using="uuid_generate_v4()",
    )
    op.add_column(
        "liked_videos",
        sa.Column(
            "id",
            sa.Uuid(),
            nullable=False,
            server_default=sa.text("uuid_generate_v4()"),
        ),
    )
    op.alter_column(
        "liked_videos",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_constraint(
        "liked_videos_user_id_fkey",
        "liked_videos",
        type_="foreignkey",
    )
    op.drop_constraint("posts_user_id_fkey", "posts", type_="foreignkey")
    op.alter_column(
        "liked_videos",
        "user_id",
        existing_type=sa.INT,
        type_=sa.Uuid(),
        postgresql_using="uuid_generate_v4()",
    )
    op.alter_column(
        "posts",
        "user_id",
        existing_type=sa.INT,
        type_=sa.Uuid(),
        postgresql_using="uuid_generate_v4()",
    )
    op.drop_table("users_tokens")
    op.drop_table("users")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "username",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("email", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "is_active",
            sa.BOOLEAN(),
            server_default=sa.text("false"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "activation_code",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "is_admin",
            sa.BOOLEAN(),
            server_default=sa.text("false"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "is_banned",
            sa.BOOLEAN(),
            server_default=sa.text("false"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "created",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "password",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "recovery_code",
            sa.VARCHAR(length=10),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "recovery_code_lifetime_end",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="users_pkey"),
        sa.UniqueConstraint("email", name="users_email_key"),
        sa.UniqueConstraint("username", name="users_nickname_key"),
    )
    op.create_table(
        "users_tokens",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "name",
            sa.VARCHAR(length=64),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "user_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "expired_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "revoked_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name="users_tokens_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="users_tokens_pkey"),
    )
    op.create_foreign_key(
        "posts_user_id_fkey",
        "posts",
        "users",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "liked_videos_user_id_fkey",
        "liked_videos",
        "users",
        ["user_id"],
        ["id"],
    )
    op.alter_column(
        "liked_videos",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "posts",
        "user_id",
        existing_type=sa.Uuid(),
        type_=sa.INT,
    )
    op.alter_column(
        "liked_videos",
        "user_id",
        existing_type=sa.Uuid(),
        type_=sa.INT,
    )
    op.drop_column("liked_videos", "id")
    op.alter_column(
        "comments",
        "user_id",
        existing_type=sa.Uuid(),
        type_=sa.INT,
    )
    op.create_foreign_key(
        "comments_user_id_fkey",
        "comments",
        "users",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    # ### end Alembic commands ###
    # ### end Alembic commands ###
