name: Pytest
on:
  push:
    branches:
      - master
  pull_request:
    types:
      - opened
      - synchronize
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
    env:
      UV_CACHE_DIR: /tmp/.uv-cache
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/edm_su_test
      FRONTEND_URL: http://localhost:3000
      MEILISEARCH_INDEX_POSTFIX: test
      S3_BUCKET: edm-su-test
      S3_ENDPOINT: http://localhost:9000
      S3_ACCESS_KEY: minioadmin
      S3_ACCESS_KEY_ID: minioadmin
      STATIC_URL: http://localhost:9000/edm-su-test
      SPICEDB_URL: "localhost:50051"
      SPICEDB_API_KEY: "edm-su"
      SPICEDB_INSECURE: "true"
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: edm_su_test
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 5432:5432
      mail:
        image: mailhog/mailhog
        ports:
          - 1025:1025
      minio:
        image: minio/minio:edge-cicd
        env:
          MINIO_ACCESS_KEY: minioadmin
          MINIO_SECRET_KEY: minioadmin
        options: >-
          --name=minio --health-cmd "curl http://localhost:9000/minio/health/live"
        ports:
          - 9000:9000
      meilisearch:
        image: getmeili/meilisearch:v1.11.1
        options: >-
          --name=meilisearch --health-cmd "curl http://localhost:7700/health"
        ports:
          - 7700:7700
    steps:
      - uses: actions/checkout@v4
      - name: Create minio bucket
        env:
          AWS_ACCESS_KEY_ID: minioadmin
          AWS_SECRET_ACCESS_KEY: minioadmin
          AWS_EC2_METADATA_DISABLED: true
        run: |
          aws --endpoint http://localhost:9000 s3api create-bucket --bucket edm-su-test --acl public-read
      - uses: authzed/action-spicedb@v1
        with:
          version: "v1.24.0"
      - name: Set up uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh
      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}
      - name: Upgrade migrations
        run: uv run -p ${{ matrix.python-version }} alembic upgrade head
      - name: Run tests
        run: uv run  -p ${{ matrix.python-version }} pytest --cov-report=term-missing:skip-covered --cov-report=xml --cov=edm_su_api tests
      - name: Upload coverage report
        if: matrix.python-version == '3.13'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Minimize uv cache
        run: uv cache prune --ci
